# Get the quant files and metadata
# Collect the sample quant files
samples <- list.dirs('Salmon_out/', recursive = FALSE, full.names = FALSE)
samples
quant_files <- file.path('Salmon_out', samples, 'quant.sf')
quant_files
names(quant_files) <- samples
print(quant_files)
# Ensure each file actually exists
file.exists(quant_files)  # all should be TRUE
# Get the quant files and metadata
# Collect the sample quant files
samples <- list.dirs('outputs/Salmon_out/', recursive = FALSE, full.names = FALSE)
samples
# check quant files
quant_files <- file.path('outputs/Salmon_out/', samples, 'quant.sf')
quant_files
# sample names
names(quant_files) <- samples
print(quant_files)
# Ensure each file actually exists
file.exists(quant_files)  # all should be TRUE
# Get the quant files and metadata
# Collect the sample quant files
samples <- list.dirs('outputs/Salmon_out', recursive = FALSE, full.names = FALSE)
samples
# check quant files
quant_files <- file.path('outputs/Salmon_out', samples, 'quant.sf')
quant_files
# sample names
names(quant_files) <- samples
print(quant_files)
# Ensure each file actually exists
# all should be TRUE
file.exists(quant_files)
# Set up metadata frame
# Metadata for DESeq2
colData <- data.frame(
row.names = samples,
cell_line = rep(c("N61311","N052611","N080611","N061011"), each = 4),
condition = rep(c("untreated","dexamethasone","albuterol","albuterol_dexamethasone"), times = 4)
)
colData
View(colData)
# Set up metadata frame
# Metadata for DESeq2: https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE52778
colData <- data.frame(
row.names = samples,
cell_line = rep(c("N61311","N052611","N080611","N061011"), each = 4),
condition = rep(c("untreated","dexamethasone","albuterol","albuterol_dexamethasone"), times = 4)
)
# Compile the tximport counts object and make DESeq dataset
# Get tximport counts object
txi <- tximport(files = quant_files,
type = 'salmon',
tx2gene = tx2gene,
ignoreTxVersion = TRUE)
# Make DESeq dataset
dds <- DESeqDataSetFromTximport(txi = txi,
colData = colData,
design = ~condition)
# condition as factor
colData$condition <- factor(colData$condition)
# Compile the tximport counts object and make DESeq dataset
# Get tximport counts object
txi <- tximport(files = quant_files,
type = 'salmon',
tx2gene = tx2gene,
ignoreTxVersion = TRUE)
# Make DESeq dataset
dds <- DESeqDataSetFromTximport(txi = txi,
colData = colData,
design = ~condition)
# Do DESeq analysis
# PCA
vsd <- vst(dds)
plotPCA(vsd)
# DEG analysis
dds <- DESeq(dds)
# Get the results
resdf <- results(dds)
resdf
# Write to CSV file
write.csv(resdf, file = "../outputs/DESeq2_results.csv", row.names = TRUE)
# Write to CSV file
write.csv(resdf, file = "outputs/DESeq2_results.csv", row.names = TRUE)
# Save as RDS (for reloading in R later)
saveRDS(resdf, file = "outputs/DESeq2_results.rds")
txi
# Load libraries
library(tidyverse)
library(tximport)
library(DESeq2)
library(EnsDb.Hsapiens.v86)
# Get the mapping from transcript IDs to gene symbols
# What are the columns in the database?
columns(EnsDb.Hsapiens.v86)
# Get the TXID and SYMBOL columns for all entries in database
tx2gene <- AnnotationDbi::select(EnsDb.Hsapiens.v86,
keys = keys(EnsDb.Hsapiens.v86),
columns = c('TXID', 'SYMBOL'))
# Remove the gene ID column
tx2gene <- dplyr::select(tx2gene, -GENEID)
# Get the quant files and metadata
# Collect the sample quant files
samples <- list.dirs('outputs/Salmon_out', recursive = FALSE, full.names = FALSE)
samples
# check quant files
quant_files <- file.path('outputs/Salmon_out', samples, 'quant.sf')
quant_files
# sample names
names(quant_files) <- samples
print(quant_files)
# Ensure each file actually exists
# all should be TRUE
file.exists(quant_files)
# Set up metadata frame
# Metadata for DESeq2: https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE52778
col_data <- data.frame(
row.names = samples,
cell_line = rep(c("N61311","N052611","N080611","N061011"), each = 4),
condition = rep(c("untreated","dexamethasone","albuterol","albuterol_dexamethasone"), times = 4)
)
# condition as factor
col_data$condition <- factor(col_data$condition)
# Compile the tximport counts object and make DESeq dataset
# Get tximport counts object
txi_counts <- tximport(files = quant_files,
type = 'salmon',
tx2gene = tx2gene,
ignoreTxVersion = TRUE)
# making sure the row names in col_data matches to column names in counts_data
colnames(txi_counts)
rownames(col_data)
# are they in the same order?
all(colnames(counts_data) == rownames(txi_counts))
txi_counts
View(txi_counts)
countts_data <- as.data.frame(txi_counts)
View(countts_data)
countts_data
counts_data <- as.data.frame(txi_counts)
head(counts_data)
names(counts_data)
# Load libraries
library(tidyverse)
library(tximport)
library(DESeq2)
library(EnsDb.Hsapiens.v86)
# Get the mapping from transcript IDs to gene symbols
# What are the columns in the database?
columns(EnsDb.Hsapiens.v86)
# Get the TXID and SYMBOL columns for all entries in database
tx2gene <- AnnotationDbi::select(EnsDb.Hsapiens.v86,
keys = keys(EnsDb.Hsapiens.v86),
columns = c('TXID', 'SYMBOL'))
# Remove the gene ID column
tx2gene <- dplyr::select(tx2gene, -GENEID)
# Get the quant files and metadata
# Collect the sample quant files
samples <- list.dirs('outputs/Salmon_out', recursive = FALSE, full.names = FALSE)
samples
# check quant files
quant_files <- file.path('outputs/Salmon_out', samples, 'quant.sf')
quant_files
# sample names
names(quant_files) <- samples
print(quant_files)
# Ensure each file actually exists
# all should be TRUE
file.exists(quant_files)
# Set up metadata frame
# Metadata for DESeq2: https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE52778
col_data <- data.frame(
row.names = samples,
cell_line = rep(c("N61311","N052611","N080611","N061011"), each = 4),
condition = rep(c("untreated","dexamethasone","albuterol","albuterol_dexamethasone"), times = 4)
)
# condition as factor
col_data$condition <- factor(col_data$condition)
# Compile the tximport counts object and make DESeq dataset
# Get tximport counts object
txi <- tximport(files = quant_files,
type = 'salmon',
tx2gene = tx2gene,
ignoreTxVersion = TRUE)
# Make DESeq dataset
dds <- DESeqDataSetFromTximport(txi = txi,
colData = colData,
design = ~condition)
# Make DESeq dataset
dds <- DESeqDataSetFromTximport(txi = txi,
colData = col_data,
design = ~condition)
# Do DESeq analysis
# PCA
vsd <- vst(dds)
plotPCA(vsd)
# DEG analysis
dds <- DESeq(dds)
# Get the results
resdf <- results(dds)
# Write to CSV file
write.csv(resdf, file = "outputs/DESeq2_results.csv", row.names = TRUE)
# Save as RDS (for reloading in R later)
saveRDS(resdf, file = "outputs/DESeq2_results.rds")
# import DESeq2 results
deseq2_results <- read.csv("outputs/DESeq2_results.csv")
names(res)
names(deseq2_results)
View(deseq2_results)
resdf
names(resdf)
resdf <- as.data.frame(resdf)
View(resdf)
head(resdf)
rownames(resdf)
# convert as data frame
resdf <- as.data.frame(resdf)
resdf$gene <- rownames(resdf)
rownames(resdf) <- NULL
# Write to CSV file
write.csv(resdf, file = "outputs/DESeq2_results.csv", row.names = TRUE)
# Save as RDS (for reloading in R later)
saveRDS(resdf, file = "outputs/DESeq2_results.rds")
# load packages
library(tidyverse)
library(RColorBrewer)
library(EnhancedVolcano)
library(pheatmap)
library(PoiClaClu)
# import DESeq2 results
deseq2_results <- read.csv("outputs/DESeq2_results.csv")
names(deseq2_results)
# Write to CSV file
write.csv(resdf, file = "outputs/DESeq2_results.csv", row.names = TRUE)
# import DESeq2 results
deseq2_results <- read.csv("outputs/DESeq2_results.csv")
names(deseq2_results)
View(deseq2_results)
# Write to CSV file
write.csv(resdf, file = "outputs/DESeq2_results.csv", row.names = FALSE)
# Save as RDS (for reloading in R later)
saveRDS(resdf, file = "outputs/DESeq2_results.rds")
# import DESeq2 results
deseq2_results <- read.csv("outputs/DESeq2_results.csv")
names(deseq2_results)
# plot average expression versus log2 fold change - points are colored blue if Padj < 0.1
plotMA(deseq2_results)
# Load libraries
library(tidyverse)
library(tximport)
library(DESeq2)
library(EnsDb.Hsapiens.v86)
# Get the mapping from transcript IDs to gene symbols
# What are the columns in the database?
columns(EnsDb.Hsapiens.v86)
# Get the TXID and SYMBOL columns for all entries in database
tx2gene <- AnnotationDbi::select(EnsDb.Hsapiens.v86,
keys = keys(EnsDb.Hsapiens.v86),
columns = c('TXID', 'SYMBOL'))
# Remove the gene ID column
tx2gene <- dplyr::select(tx2gene, -GENEID)
# Get the quant files and metadata
# Collect the sample quant files
samples <- list.dirs('outputs/Salmon_out', recursive = FALSE, full.names = FALSE)
samples
# check quant files
quant_files <- file.path('outputs/Salmon_out', samples, 'quant.sf')
quant_files
# sample names
names(quant_files) <- samples
print(quant_files)
# Ensure each file actually exists
# all should be TRUE
file.exists(quant_files)
# Set up metadata frame
# Metadata for DESeq2: https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE52778
col_data <- data.frame(
row.names = samples,
cell_line = rep(c("N61311","N052611","N080611","N061011"), each = 4),
condition = rep(c("untreated","dexamethasone","albuterol","albuterol_dexamethasone"), times = 4)
)
# condition as factor
col_data$condition <- factor(col_data$condition)
# Compile the tximport counts object and make DESeq dataset
# Get tximport counts object
txi <- tximport(files = quant_files,
type = 'salmon',
tx2gene = tx2gene,
ignoreTxVersion = TRUE)
# Make DESeq dataset
dds <- DESeqDataSetFromTximport(txi = txi,
colData = col_data,
design = ~condition)
# Do DESeq analysis
# PCA
vsd <- vst(dds)
plotPCA(vsd)
# DEG analysis
dds <- DESeq(dds)
# Get the results
resdf <- results(dds)
# MA plot
plotMA(resdf)
# convert as data frame
resdf <- as.data.frame(resdf)
resdf$gene <- rownames(resdf)
rownames(resdf) <- NULL
# Write to CSV file
write.csv(resdf, file = "outputs/DESeq2_results.csv", row.names = FALSE)
# Save as RDS (for reloading in R later)
saveRDS(resdf, file = "outputs/DESeq2_results.rds")
# Volcano Plot
# Default cutoffs are log2FC > |2| and adjusted P-value < 0.05
EnhancedVolcano(
deseq2_results,
lab = deseq2_results$gene,
x = "log2FoldChange",
y = "padj"
)
# import DESeq2 results
deseq2_results <- read.csv("outputs/DESeq2_results.csv")
names(deseq2_results)
# Volcano Plot
# Default cutoffs are log2FC > |2| and adjusted P-value < 0.05
EnhancedVolcano(
deseq2_results,
lab = deseq2_results$gene,
x = "log2FoldChange",
y = "padj"
)
# Add custom log2FC and adjusted P-value cutoffs and size of points and labels
EnhancedVolcano(
deseq2_results,
lab = anno_results$gene,
x = "log2FoldChange",
y = "padj",
pCutoff = 0.001,
FCcutoff = 2,
pointSize = 1.5,
labSize = 3.0,
title = "Untreated vs. Treated"
)
# Add custom log2FC and adjusted P-value cutoffs and size of points and labels
EnhancedVolcano(
deseq2_results,
lab = deseq2_results$gene,
x = "log2FoldChange",
y = "padj",
pCutoff = 0.001,
FCcutoff = 2,
pointSize = 1.5,
labSize = 3.0,
title = "Untreated vs. Treated"
)
# Adjust axis limits
EnhancedVolcano(
deseq2_results,
lab = deseq2_results$gene,
x = "log2FoldChange",
y = "padj",
pCutoff = 0.001,
FCcutoff = 2,
pointSize = 1.5,
labSize = 3.0,
xlim = c(-5, 5),
ylim = c(0, -log10(10e-10)),
title = "Untreated vs. Treated"
)
# Modify border and remove grid lines
EnhancedVolcano(
deseq2_results,
lab = deseq2_results$gene,
x = "log2FoldChange",
y = "padj",
pCutoff = 0.001,
FCcutoff = 2,
pointSize = 1.5,
labSize = 3.0,
xlim = c(-5, 5),
ylim = c(0, -log10(10e-10)),
border = "full",
borderWidth = 1.5,
borderColour = "black",
gridlines.major = FALSE,
title = "Untreated vs. Treated"
)
# Remove any genes that do not have any entrez identifiers
results_sig_entrez <- subset(deseq2_results, is.na(entrez) == FALSE)
# Load libraries
library(tidyverse)
library(tximport)
library(DESeq2)
library(EnsDb.Hsapiens.v86)
# Get the mapping from transcript IDs to gene symbols
# What are the columns in the database?
columns(EnsDb.Hsapiens.v86)
# Get the TXID and SYMBOL columns for all entries in database
tx2gene <- AnnotationDbi::select(EnsDb.Hsapiens.v86,
keys = keys(EnsDb.Hsapiens.v86),
columns = c('TXID', 'SYMBOL'))
# Remove the gene ID column
tx2gene <- dplyr::select(tx2gene, -GENEID)
# Get the quant files and metadata
# Collect the sample quant files
samples <- list.dirs('outputs/Salmon_out', recursive = FALSE, full.names = FALSE)
samples
# check quant files
quant_files <- file.path('outputs/Salmon_out', samples, 'quant.sf')
quant_files
# sample names
names(quant_files) <- samples
print(quant_files)
# Ensure each file actually exists
# all should be TRUE
file.exists(quant_files)
# Set up metadata frame
# Metadata for DESeq2: https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE52778
col_data <- data.frame(
row.names = samples,
cell_line = rep(c("N61311","N052611","N080611","N061011"), each = 4),
condition = rep(c("untreated","dexamethasone","albuterol","albuterol_dexamethasone"), times = 4)
)
# condition as factor
col_data$condition <- factor(col_data$condition)
# Compile the tximport counts object and make DESeq dataset
# Get tximport counts object
txi <- tximport(files = quant_files,
type = 'salmon',
tx2gene = tx2gene,
ignoreTxVersion = TRUE)
# Make DESeq dataset
dds <- DESeqDataSetFromTximport(txi = txi,
colData = col_data,
design = ~condition)
# load packages
library(tidyverse)
library(RColorBrewer)
library(EnhancedVolcano)
# Load libraries
library(tidyverse)
library(tximport)
library(DESeq2)
library(EnsDb.Hsapiens.v86)
# Get the quant files and metadata
# Collect the sample quant files
samples <- list.dirs('outputs/Salmon_out', recursive = FALSE, full.names = FALSE)
samples
# check quant files
quant_files <- file.path('outputs/Salmon_out', samples, 'quant.sf')
quant_files
# sample names
names(quant_files) <- samples
print(quant_files)
# Ensure each file actually exists
# all should be TRUE
file.exists(quant_files)
# Set up metadata frame
# Metadata for DESeq2: https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE52778
col_data <- data.frame(
row.names = samples,
cell_line = rep(c("N61311","N052611","N080611","N061011"), each = 4),
condition = rep(c("untreated","dexamethasone","albuterol","albuterol_dexamethasone"), times = 4)
)
# condition as factor
col_data$condition <- factor(col_data$condition)
# Get the mapping from transcript IDs to gene symbols
# What are the columns in the database?
columns(EnsDb.Hsapiens.v86)
AnnotationDbi::select(EnsDb.Hsapiens.v86,
keys = keys(EnsDb.Hsapiens.v86),
columns = c('TXID', 'SYMBOL'))
# Get the TXID and SYMBOL columns for all entries in database
tx2gene <- AnnotationDbi::select(EnsDb.Hsapiens.v86,
keys = keys(EnsDb.Hsapiens.v86),
columns = c('TXID', 'SYMBOL'))
View(tx2gene)
# Remove the gene ID column
tx2gene <- dplyr::select(tx2gene, -GENEID)
# Compile the tximport counts object and make DESeq dataset
# Get tximport counts object
txi <- tximport(files = quant_files,
type = 'salmon',
tx2gene = tx2gene,
ignoreTxVersion = TRUE)
View(txi)
# Make DESeq dataset
dds <- DESeqDataSetFromTximport(txi = txi,
colData = col_data,
design = ~condition)
# Do DESeq analysis
# PCA
vsd <- vst(dds)
plotPCA(vsd)
# DEG analysis
dds <- DESeq(dds)
# Get the results
resdf <- results(dds)
View(resdf)
# MA plot
plotMA(resdf)
# convert as data frame
resdf <- as.data.frame(resdf)
View(resdf)
rownames(resdf)
resdf$gene <- rownames(resdf)
rownames(resdf) <- NULL
# Write to CSV file
write.csv(resdf, file = "outputs/DESeq2_results.csv", row.names = FALSE)
# Save as RDS (for reloading in R later)
saveRDS(resdf, file = "outputs/DESeq2_results.rds")
